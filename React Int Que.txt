Advantage of react

Simple to build SPA by using components
React is cross platform and open source
Lightweight and fast as it uses virtual DOM

What is DOM?
DOM represents webpage as Tree like structure which allows javascript to dynamically access and manipulate the content of webpage

Difference between DOM and virtual DOM?
React uses virtual DOM to efficiently update the UI without re-rendering the entire page which helps to improve performance and make application more responsive
There can be more than one virtual DOM.

What is npm and node modules folder?
npm is used to manage dependencies for your react project including react library.

What is public folder in react?
It contains static assets that are served directly to users browser such as images, fonts and index.html file

what is the role of src folder?
src folder is used to store the source code of the application

index.html is the entry point of the application

App.js is the root level component and it responsible for rendering all other components


what is role of index.js, ReactDOM and render method in react?
index.js is an integration file which renders all components and replace root element of index.html file with newly rendered root element
ReactDOM is JS library that renders component to DOM or browser.


Advantage of JSX
improve code readability and code reusability
Supports JavaScript expression


Can browser read JSX file? what is babel?
Browser cannot understand JSX code.
Babel is used to transpile JSX syntax into regular javascript which browser can understand.

What is transpiler?
Whenever we change code from JSX to javascript this process is called transpile.

Role of fragment in react?
We should have a common root or parent element.
Fragment is a way to group a list of children without adding extra nodes to the DOM.

What is map method?
map method allows you to iterate over an array and modify its elements using callback function.

Props in JSX
Props are way to pass data from parent component to child component

What is spread operator?
Spread operator is used to expand or spread an array or object

Condition rendering in JSX?
If else
Ternary operator
2>1 ? "ABC" : "xyz";
&& operator
2>1 && "abc";
switch statement

What are state, stateless, stateful and state management terms?
State refers to current data of the component
stateful or state management means when a user performs some actions on UI the react application should be able to update and re-render the data on the UI

What is Prop drilling?
Process of passing down data through multiple layers of components.


Hooks in React
What are react hooks?
React hooks are inbuilt function provided by react that allows functional components to use state and lifecycle features.
Before hooks in class component lifecycle method were used to maintain state in react.

useState - state
useEffect - side effects
useContext - context
useReducer -  state management for smaller application
useCallback - memoization
useMemo - performance
useRef - ref
useLayoutEffect - synchronous side effect

What is useState hook and how it works?
useState hook will be called only once when the component is loaded for first time.
When you update the component by clicking the button only the increment function and set state is called not the hook.

useState accepts initial value as parameter and returns an array with two elements
The first element is current state value.
The second element is function that is used to update the state.

What is role of useEffect hook and how it works?
useEffect hook is used to perform side effects in functional component.
For Example: Data fetching from API that needs to be performed after the component has been rendered.

useEffect is called after the component renders

What is Dependency array in useEffect?
If dependency value change the code inside useEffect will be executed again.

Empty array in useEffect?
An empty array indicates the effect function should run only once.

Hooks useContext and useReducer
Role of useContext() hook
UseContext in react provides a way to pass data from parent to child component without using props.

what is createContext method? what are provider and consumer properties?
createContext method returns an object with provider and consumer properties.
useContext method or consumer property can be used to consume the context value in child components
Provider property is responsible for providing context value to all child component

Theme switching
Localization (language selection)

------------------------------------------------------------------------------------------------------------------

Component Lifecycle methods
what are component life cycle phases?
whenever component loads in react it has a life
Mounting phase (component creation started) - it occurs when an instance of component is created and inserted into DOM
Updating phase (component updates)- it occurs when a component is being re-rendered as a result of change in props or state
Unmounting phase (removal from DOM)-it occurs when component gets removed from DOM

What are component Lifecycle method?

mounting Phase                        Updating phase                     Unmounting phase
constructor()                         getDerivedStateFromProps()         componentWillUnmount()
getDerivedStateFromProps()            shouldComponentUpdate()
render()                              render()
componentDidMount()                   getSnapshotBeforeUpdate()
                                      componentDidUpdate()


What are constructor in class component? When to use them?
constructor function will be invoked automatically when class component is called.
constructor is used to initialize the components state or perform any setup that is needed before the component is rendered.

What is role of super keyword in constructor?
super keyword will execute the constructor of parent class component.

What is role of render() method in component lifecycle?
render method returns react elements that will be rendered to the DOM.

How state is maintained in class component?
this.setState() method is used to update the state.
this.state property is used to render the update state in DOM.

what is the role of ComponentDidMount() method in component life cycle?
It is called after a component has been rendered to DOM.

---------------------------------------------------------------------------------------------------------------------

Controlled and Uncontrolled component

What are controlled component in react?
A controlled component is a component whose form element (like input fields,checkboxes) are controlled by state of the application.
Here we use useState to manage state

In uncontrolled component we will use useRef to handle data.

Difference between controlled and uncontrolled component

Advantages of using controlled component in react Forms
In controlled component form element have their values managed by react state ensuring single source of truth
controlled component offer better control and maintainability

----------------------------------------------------------------------------------------------------------------------
Code Splitting

What is code splitting in react?
It is a technique to  split JavaScript bundle into smaller chunks which are loaded on demand.

How to implement code splitting in react?
Use React.lazy() to lazily import components.
wrap component with suspense to handle loading.
configure your build tool (Eg: webpack) for dynamic imports

What is role of Lazy and suspense method in react?
Lazy is used to load a component dynamically (only when needed)
Suspense component is used to display a fallback UI while lazily loading component.

import React, {Suspense,lazy} from 'react';
const Profile = lazy(()=>import('./Profile'));
function App(){
return(
  <Suspense fallback={{<div>Loading</div>}}>
  <Profile/>
  </Suspense>
)
}

Pros and cons of Code Splitting
pros
faster initial load time
optimized bandwidth usage
Improved caching
parallel loading

cons
complexity
tooling dependency
potential runtime error
increase number of requests

what is role of import function in code splitting?
import function return a promise that allow dynamic loading of modules.

-----------------------------------------------------------------------------------------------------------------------------
What is Higher order component in react?
A HOC is a component which takes another component as argument and add extra features to that component.


what is use of react profiler?
allows developer to analyze the performance of application.

what are differences between fetch and axios for api calls?

How can you optimize performance in react?
memoization with useMemo and useCallback
lazy loading with React.Lazy
code splitting
optimizing images and assets

-----------------------------------------------------------------------------------------------------------------------------
Usememo hook can be used to memoize a value of a expensive computational function. 
for example if we have a function which has complex calculation in a component. I can memoize only the particular function. So it will re-evaluate only if the dependencies change.

React.memo can be used to memoize the whole component and only re-render if the prop changes.

Usecallback hook can be used to memoize a function. It returns a memoized callback function. This will only recreate the function if the dependency changes


Referential equality
Everytime a component re-renders its function gets recreated.
In order to avoid the function from being recreated we can use the useCallback hook,useMemo hook
--------------------------------------------------------------------------------------------------------------------------
How state is handled in microfrontend?
In a microfrontend architecture each micro front end is usually an independent application that handles its own state and UI.
But sometimes they need to share or transfer state for example if user logs in from MFE-A and you want MFE-B to also know the user is logged in you can use
Global Event bus (custome event)
   -use browsers customEvent or a shared event emitter
   -MFE can dispatch events and listen fro them, making it loosely coupled

MFE-A
window.dispatchEvent(new CustomEvent('userLogin', {detail: {name:"Joe"} } ));

MFE-B
window.addEventListener('userLogin',(e)=>{console.log(e.detail.name); });

Shared Global State
  -you keep a single store outside of MFE
  -all MFE import and use the same store instance

---------------------------------------------------------------------------------
React Portal
Normally react renders children into the DOM inside the parent components DOM hierarchy.
Portal allow you to render a component outside its parent DOM hierarchy

UseCase: Modals,tooltips,dropdowns anything that needs to break out of the parent
It helps to avoid CSS issues like z-index,overflow:hidden.
-------------------------------------
React Fiber 
is the internal rendering engine in react since react 16
it decides how and when to update the DOM

old react (stack reconciler) updated the DOM synchronously - blocking
Fiber enables incremental rendering
  -breaks work into chunks
  -allows react to pause,prioritize or abort work

Fiber creates a tree data structure, each node is a fiber
Every update triggers a process:
    - render phase: creates a work in progress fiber tree
    - commit phase: applies changes to the DOM

----------------------------------------
Scenario based
How do you handle sensitive data in client?
Minimize Data Exposure
  - Send only what is needed dont send unneccesary personal or sensitive data from backend
  - use field level filtering to avoid exposing sensitive fields in API

Secure Storage
  - avoid storing sensitive data in localStorage/SessionStorage (vulnerable to XSS attack)
  - if you must store token prefer httpOnly cookies (not accessible to JS)

Authentication & Authorization
  - use short-lived JWTs or access tokens with refersh tokens stored in httpOnly cookies
  - validate all sensitive operations on server side not the client

Secure Communication
  - always use HTTPS to prevent man-in-middle attacks
  - consider certificate pinning in mobile apps

--------------------------------------------------
what is HttpOnly cookie?
It is a cookie that has the HttpOnly flag set when the server sends it. This means JavaScript on the client cannot acces it via document.cookie
Only the browser managers it automatically during HTTPS requests to the server.
So attackers exploitting XSS(Cross site scripting) cannot steal these cookies because they are not accesible in JavaScript

fetch("url",{
  method:"GET",
  credentials:"include" //allows cookies including HttpOnly to be sent
)

HttpOnly cookies can only be set by the server via Set-Cookie headers

----------------------------------------------------
If HttpOnly cookies are not accessible in React how do you know if a user is logged in?
   - On app load call the backend endpoint like /auth/me with credentials:"include"
   - The backend checks the HttpOnly cookie. if valid,return thr user info
   - react stores the user in state/context (not localStorage)

How would you prevent CSRF attacks if you're using HttpOnly cookies for auth?
   - set SameSite=Strict on cookies to prevent cross site requests.
   - for APIs that must allow cross site request use anti-CSRF tokens
       - backend sends a CSRF token in the response body(not cookie)
       - react includes this token in request headers
       - backend validates it along with the HttpOnly cookie

During login your react app is on port 300 and you .NET Api is on port 5001.The cookie isn't being set. Why?
Because of CORS + cookie policies
  - you must set credentials:"include" in fetch (frontend)
  - backend also must allows credentials
    app.UseCors(policy => policy.WithOrigins("URL")
        .AllowCredentials()
        .AllowAnyHeaders()
        .AllowAnyMethod()
    );

-----------------------------------------------
React works locally but not after Azure deployment where do you start debugging?
1)Check build process
Did you run npm run build (or yarn build) successfully before deploying?
Is the build folder deployed to Azure?

2)Check Azure deployment logs
Review the Azure App Service logs or Container logs depending on how you deployed it.
Look for build errors, failed start scripts, or runtime errors.

Where to check:
App Service > Diagnose and solve problems
Log stream in Azure portal

3)Check environment variables
Are you using .env files locally that are not set in Azure?
Check if REACT_APP_* environment variables are properly configured in Azure.

Where to set:
Configuration tab in Azure App Service → Application settings.

4)Check API endpoints
If you're calling backend services, are those endpoints reachable from Azure?
Is CORS configured correctly?
Are environment URLs correct in the deployed environment?

5)Check static file serving
Is Azure configured to serve the static files (build folder)?
Check the index.html, static/js, static/css files are present and served.

6)Check browser console/network errors
Open DevTools → Console & Network tab.

Look for:
404 errors (files not found)
CORS errors
JS errors preventing execution
Missing environment variables

------------------------------------------

API works in postman but not from react what is your checklist?
1)CORS (Cross-Origin Resource Sharing) issues
Postman bypasses CORS, but browsers enforce it.
Check if the API allows requests from your React app’s domain.

What to check:
Does the API response include the Access-Control-Allow-Origin header?
Is it set to * or to your React app’s URL?

Solutions:
Update server-side CORS settings.
Use a proxy in development (package.json -> "proxy": "https://api.example.com").
Use Azure API Management or CORS settings if hosted there.

2)Incorrect API URL
Postman may use full URLs, but React may be using relative paths or wrong environment variables.

What to check:
Are you using process.env.REACT_APP_API_URL?
Does it match the production/development environment?
Is the protocol (http vs https) correct?

3)HTTP vs HTTPS
Browsers block mixed content requests (https page calling http API).

What to check:
Is your React app served over HTTPS but your API over HTTP?
Use HTTPS everywhere.

4)Authentication/Authorization issues
Postman may have headers, tokens, or cookies you manually set.

What to check:
Are you sending the same Authorization header in your React request?
Is the token stored and retrieved correctly in localStorage, sessionStorage, or state?

5)Request headers/content-type issues
Postman may set Content-Type: application/json or others by default.

What to check:
Are you specifying the correct headers in your fetch/axios request?

6)Network or browser errors
Open DevTools → Console and Network tabs.

What to check:
Are requests blocked by CORS or other security policies?
Are requests failing with 4xx or 5xx status codes?
Are requests timing out or not sent at all?

-----------------------------------------------
App slows down with more users. what do you check first?
1)Server-side bottlenecks
Is the backend/API under load?
Check CPU, memory, disk, and network utilization.
Look for database connection limits or slow queries.
Are requests queued or timing out?

Tools:
Azure Monitor / App Insights
Logs, metrics dashboards
Database query analysis tools

2)Network latency and bandwidth
More users → more data requests.
Are your endpoints throttled or experiencing network delays?
Are static assets being cached or repeatedly downloaded?

Check:
CDN usage (like Azure CDN, Cloudflare)
Browser caching headers (Cache-Control)
File sizes and compression (gzip, Brotli)

3)Client-side performance
Is the app doing unnecessary re-rendering?
Are components rerendering too frequently or handling state inefficiently?

Tools:
React DevTools → inspect rendering behavior
Chrome Performance tab → CPU usage, scripting time

Check:
Are you using useEffect or state hooks inefficiently?
Are expensive calculations happening on every render?
Are you memoizing where needed (React.memo, useMemo, useCallback)?

4)State management issues
Large or deeply nested state can cause excessive renders.
Is global state causing entire tree rerenders on small changes?

Check:
Are you lifting state unnecessarily?
Is state localized or distributed appropriately?

5)API requests and data fetching patterns
Are requests being sent multiple times by different components?
Are results cached or refetched on every render?

Solutions:
Use libraries like React Query, SWR for caching and background updates.
Debounce user inputs to prevent rapid calls.

6)Authentication or session handling
Are users re-authenticating frequently due to session mismanagement?
Are tokens refreshed inefficiently?

7)Static assets optimization
Are images, videos, or large assets being served efficiently?
Are unnecessary libraries bloating the bundle?

Check:
Run npm run analyze with webpack-bundle-analyzer or similar
Optimize images, split code, lazy-load components
